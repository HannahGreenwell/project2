<%# This code is just for the drawer - the mouse event handlers that draw on the canvas %>

<script src="/leap.js"></script>

<script>
  $(document).ready(function() {

    let outOfFrame = true;
    let isDrawing = false;

    //LEAP BOX
    $('#cursor').css({
      top: offsetY,
      left: offsetX
    });

     let controller = new Leap.Controller();

     controller.on("frame", function(frame) {
       <%# if (frame.gestures.length > 0) {
        for (var i = 0; i < frame.gestures.length; i++) {
          var gesture = frame.gestures[i];
          if(gesture.type == "swipe") {
            canvasApp.clearCanvas();
           }
         }
      } %>
     if (frame.pointables.length > 0) {
        //Get a pointable and normalize the tip position
        let pointable = frame.pointables[0];
        let interactionBox = frame.interactionBox;
        let normalizedPosition = interactionBox.normalizePoint(pointable.tipPosition, true);

        // Convert the normalized coordinates to span the canvas
        let canvasX = canvas.width * normalizedPosition[0];
        let canvasY = canvas.height * (1 - normalizedPosition[1]);
        //we can ignore z for a 2D context

        const xPos = canvasX + offsetX;
        const yPos = canvasY + offsetY;

        if (outOfFrame) {
          // we WERE out of frame, and now we're not
          canvasApp.setPosition(xPos, yPos);
          outOfFrame = false;
          //send websocket position update
          App.games.perform('drawer_entered', {
            event: 'mouseenter',
            position: {xPos, yPos}
          });
        }


        if (pointable.tipPosition[2] < 0) {

          <%# if(!isDrawing){
            console.warn('JUST STARTED DRAWING')
            // we have just started drawing again - so send the new start position
            isDrawing = true;
            App.games.perform('drawer_entered', {
              event: 'mouseenter',
              position: {xPos, yPos}
            });
          } %>

          // do drawing! (z-depth test)

          $('#cursor').css({ opacity: 1.0 });

          canvasApp.drawOnMove(1, xPos, yPos);

          App.games.perform('drawer_moved', {
            event: 'mousemove',
            position: {xPos, yPos},
            userInput: 1
          });

        } else {
          // not drawing, just showing cursor, setting pos

          App.games.perform('drawer_entered', {
            event: 'mouseenter',
            position: {xPos, yPos}
          });

          canvasApp.setPosition(xPos, yPos);

          $('#cursor').css({
            opacity: 0.3,
          });

        } // not drawing


        // always show cursor if within frame
        $('#cursor').css({
          display: 'block',
          top: yPos - 25,
          left: xPos
        });


      } else {
        // no pointables, i.e. out of frame
        $('#cursor').hide();
        outOfFrame = true;
      }

    });
    controller.connect();


    // mouse down draws a single circle and sets last known x,y pos as the clicked pos
    $('#canvasElement').mousedown(event => {
      const xPos = event.pageX;
      const yPos = event.pageY;

      canvasApp.setPosition(xPos, yPos);
      canvasApp.drawOnClick();

      App.games.perform('drawer_clicked', {event: 'click', position: {xPos: xPos, yPos: yPos}});
    });

    // mouse enter sets last known x,y pos as the entered pos
    $('#canvasElement').mouseenter(event => {
      const xPos = event.pageX;
      const yPos = event.pageY;

      canvasApp.setPosition(xPos, yPos);

      App.games.perform('drawer_entered', {event: 'mouseenter', position: {xPos: xPos, yPos: yPos}});
    });

    // on mouse move draws a line from last known x,y to new x,y pos set in the drawOnMove function
    $('#canvasElement').mousemove(event => {
      const userInput = event.which;
      const xPos = event.pageX;
      const yPos = event.pageY;

      canvasApp.drawOnMove(userInput, xPos, yPos);

      // Only send a websockets message if the correct button was clicked
      if(userInput === 1){
        App.games.perform('drawer_moved', {event: 'mousemove', position: {xPos: xPos, yPos: yPos}, userInput: userInput});
      }
    });

    // Clears the drawer's canvas and sends a websockets message
    // to clear the guesser's canvas
    $('.clearButton').on('click', function() {
      canvasApp.clearCanvas();

    App.games.perform('clear_canvas', {clear: true});
   });

   $('body').append("<div id='cursor'></div>")

});
</script>
