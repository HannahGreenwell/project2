<%# Canvas JS code only for the drawer - mouse event handlers that draw on the canvas %>

<script src="/leap.js"></script>

<script>
  $(document).ready(function() {

    ///// MOUSE EVENTS /////

    // mouse down event handler - draws a dot
    $('#canvasElement').mousedown(event => {
      // Get the x and y coordinates of the mouse event
      const xPos = event.pageX;
      const yPos = event.pageY;

      // Invoke setPosition and drawOnClick methods in _canvas_js_common.html.erb
      canvasApp.setPosition(xPos, yPos);
      canvasApp.drawOnClick();

      // Broadcast WebSocket message to games_channel.rb containing event type
      // and x and y coordinates
      App.games.perform('drawer_clicked', {event: 'click', position: {xPos: xPos, yPos: yPos}});
    });

    // mouse enter event handler - updates last know x and y coordinates
    $('#canvasElement').mouseenter(event => {
      // Get the x and y coordinates of the mouse event
      const xPos = event.pageX;
      const yPos = event.pageY;

      // Invoke setPosition method in _canvas_js_common.html.erb
      canvasApp.setPosition(xPos, yPos);

      // Broadcast WebSocket message to games_channel.rb containing event type
      // and x and y coordinates
      App.games.perform('drawer_entered', {event: 'mouseenter', position: {xPos: xPos, yPos: yPos}});
    });

    // mouse move event handler  - draws a line
    $('#canvasElement').mousemove(event => {
      // Get the key pressed and x and y coordinates of the mouse event
      const userInput = event.which;
      const xPos = event.pageX;
      const yPos = event.pageY;

      // Invoke the drawOnMove method in _canvas_js_common.html.erb
      canvasApp.drawOnMove(userInput, xPos, yPos);

      // If the mouse's left click was pressed, broadcast a WebSocket message to
      // games_channel.rb containing the event type, key pressed and x and y coordinates
      if(userInput === 1) {
        App.games.perform('drawer_moved', {event: 'mousemove', position: {xPos: xPos, yPos: yPos}, userInput: userInput});
      }
    });

    // Clear Canvas button click handler
    $('.clearButton').on('click', function() {
      // Clear the drawer's canvas
      canvasApp.clearCanvas();
      // Broadcast a WebSocket message to games_channel.html.erb
      // to clear the guesser's canvas
      App.games.perform('clear_canvas', {clear: true});
    });


    ///// LEAP MOTION /////
    let outOfFrame = true;
    let isDrawing = false;

    $('#cursor').css({
      top: offsetY,
      left: offsetX
    });

    let controller = new Leap.Controller();

    controller.on("frame", function(frame) {
      if (frame.pointables.length > 0) {
        //Get a pointable and normalize the tip position
        let pointable = frame.pointables[0];
        let interactionBox = frame.interactionBox;
        let normalizedPosition = interactionBox.normalizePoint(pointable.tipPosition, true);

        // Convert the normalized coordinates to span the canvas
        let canvasX = canvas.width * normalizedPosition[0];
        let canvasY = canvas.height * (1 - normalizedPosition[1]);
        //we can ignore z for a 2D context

        const xPos = canvasX + offsetX;
        const yPos = canvasY + offsetY;

        if (outOfFrame) {
          // we WERE out of frame, and now we're not
          canvasApp.setPosition(xPos, yPos);
          outOfFrame = false;
          // Broadcast WebSocket message to games_channel.rb containing
          // the type of event and x and y coordinates
          App.games.perform('drawer_entered', {
            event: 'mouseenter',
            position: {xPos, yPos}
          });
        }

        if (pointable.tipPosition[2] < 0) {

          // do drawing! (z-depth test)

          $('#cursor').css({ opacity: 1.0 });

          canvasApp.drawOnMove(1, xPos, yPos);

          // Broadcast WebSocket message to games_channel.rb containing
          // the type of event, x and y coordinates and the key pressed
          App.games.perform('drawer_moved', {
            event: 'mousemove',
            position: {xPos, yPos},
            userInput: 1
          });
        } else {
          // not drawing, just showing cursor, setting pos

          // Broadcast WebSocket message to games_channel.rb containing
          // the type of event and x and y coordinates
          App.games.perform('drawer_entered', {
            event: 'mouseenter',
            position: {xPos, yPos}
          });

          canvasApp.setPosition(xPos, yPos);

          $('#cursor').css({
            opacity: 0.3,
          });
        } // not drawing

        // always show cursor if within frame
        $('#cursor').css({
          display: 'block',
          top: yPos - 25,
          left: xPos
        });
      } else {
        // no pointables, i.e. out of frame
        $('#cursor').hide();
        outOfFrame = true;
      }
    });

    controller.connect();

    $('body').append("<div id='cursor'></div>")
  });
</script>
